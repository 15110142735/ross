import os
from pathlib import Path
from tempfile import tempdir

import numpy as np
import pytest
from numpy.testing import assert_allclose, assert_almost_equal

import ross as rs
from ross.defects.crack import Crack
from ross.units import Q_

steel2 = rs.Material(name="Steel", rho=7850, E=2.17e11, Poisson=0.2992610837438423)

#  Rotor with 6 DoFs, with internal damping, with 10 shaft elements, 2 disks and 2 bearings.
i_d = 0
o_d = 0.019
n = 33

# fmt: off
L = np.array(
        [0  ,  25,  64, 104, 124, 143, 175, 207, 239, 271,
        303, 335, 345, 355, 380, 408, 436, 466, 496, 526,
        556, 586, 614, 647, 657, 667, 702, 737, 772, 807,
        842, 862, 881, 914]
        )/ 1000
# fmt: on

L = [L[i] - L[i - 1] for i in range(1, len(L))]

shaft_elem = [
    rs.ShaftElement6DoF(
        material=steel2,
        L=l,
        idl=i_d,
        odl=o_d,
        idr=i_d,
        odr=o_d,
        alpha=8.0501,
        beta=1.0e-5,
        rotary_inertia=True,
        shear_effects=True,
    )
    for l in L
]

Id = 0.003844540885417
Ip = 0.007513248437500

disk0 = rs.DiskElement6DoF(n=12, m=2.6375, Id=Id, Ip=Ip)
disk1 = rs.DiskElement6DoF(n=24, m=2.6375, Id=Id, Ip=Ip)

kxx1 = 4.40e5
kyy1 = 4.6114e5
kzz = 0
cxx1 = 27.4
cyy1 = 2.505
czz = 0
kxx2 = 9.50e5
kyy2 = 1.09e8
cxx2 = 50.4
cyy2 = 100.4553

bearing0 = rs.BearingElement6DoF(
    n=4, kxx=kxx1, kyy=kyy1, cxx=cxx1, cyy=cyy1, kzz=kzz, czz=czz
)
bearing1 = rs.BearingElement6DoF(
    n=31, kxx=kxx2, kyy=kyy2, cxx=cxx2, cyy=cyy2, kzz=kzz, czz=czz
)

rotor = rs.Rotor(shaft_elem, [disk0, disk1], [bearing0, bearing1])


@pytest.fixture
def crack_mayes():

    massunbt = np.array([5e-4, 0])
    phaseunbt = np.array([-np.pi / 2, 0])

    crack = rotor.run_crack(
        dt=0.01,
        tI=0,
        tF=0.5,
        cd=0.2,
        n_crack=18,
        speed=1200,
        massunb=massunbt,
        phaseunb=phaseunbt,
        crack_type="Mayes",
        print_progress=False,
    )

    return crack


def test_crack_mayes_parameters(crack_mayes):
    assert crack_mayes.dt == 0.01
    assert crack_mayes.tI == 0
    assert crack_mayes.tF == 0.5
    assert crack_mayes.cd == 0.2
    assert crack_mayes.n_crack == 18
    assert crack_mayes.speed == 1200


# def test_crack_mayes_forces(crack_mayes):
#     # fmt: off
#     teste1 = np.array([ 0.00000000e+000, -5.65737467e+001, -3.80574133e+007,
#                1.79354133e+013, -5.70542069e+018,  2.01952376e+011,
#               -5.94903332e+029,  2.02506671e+035, -6.00623259e+040,
#                1.55894546e+046, -4.71566508e+038,  1.24299225e+057,
#               -3.79247742e+062,  1.01462250e+068, -2.37909491e+073,
#                6.42053137e+065, -1.52571232e+084,  4.09586588e+089,
#               -9.39386475e+094,  1.80292434e+100, -3.51654173e+092,
#                5.11103166e+110, -1.64184882e+115, -3.46272408e+121,
#                1.80923524e+127, -8.24817978e+119,  2.76963262e+138,
#               -1.04486101e+144,  3.35417717e+149, -9.29309687e+154,
#                2.98992204e+147, -8.26437193e+165,  2.65015071e+171,
#               -7.44972546e+176,  1.83872706e+182, -5.27238320e+174,
#                1.32748727e+193, -3.84141499e+198,  9.69292995e+203,
#               -2.12347673e+209,  5.22673858e+201, -1.12079831e+220,
#                2.55762696e+225, -4.43171513e+230,  4.22965599e+235,
#                9.37969791e+227, -7.23121844e+246,  3.80311087e+252,
#               -1.46402574e+258,  4.57419176e+263, -1.61961237e+256])
#     # fmt: on
#     assert crack_mayes.forces_crack[crack_mayes.n_crack * 6, :] == pytest.approx(teste1)


def test_crack_mayes_forces(crack_mayes):
    assert crack_mayes.KK_CRACK == pytest.approx(
        # fmt: off
        np.array([[-2.26497650e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.86264515e-09,  0.00000000e+00,
            2.26497650e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  7.07805157e-08,  0.00000000e+00],
        [ 0.00000000e+00, -2.14576721e-06,  0.00000000e+00,
            -6.51925802e-08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  2.14576721e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  2.05085786e+09,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.05085786e+09,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00, -6.33299351e-08,  0.00000000e+00,
            -1.92085281e-09,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  6.33299351e-08,  0.00000000e+00,
            1.81898940e-11,  0.00000000e+00,  0.00000000e+00],
        [ 3.72529030e-08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -2.91038305e-11,  0.00000000e+00,
            -3.72529030e-08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.08775566e-09,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  3.56144590e+04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -3.56144590e+04],
        [ 2.26497650e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  1.86264515e-09,  0.00000000e+00,
            -2.26497650e-06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -7.07805157e-08,  0.00000000e+00],
        [ 0.00000000e+00,  2.14576721e-06,  0.00000000e+00,
            6.51925802e-08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -2.14576721e-06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00, -2.05085786e+09,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  2.05085786e+09,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00, -1.86264515e-09,  0.00000000e+00,
            -4.00177669e-11,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  1.86264515e-09,  0.00000000e+00,
            -2.91038305e-11,  0.00000000e+00,  0.00000000e+00],
        [ 3.16649675e-08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  7.63975549e-11,  0.00000000e+00,
            -3.16649675e-08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.04773790e-09,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -3.56144590e+04,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  3.56144590e+04]])
        # fmt: on
    )

    # assert crack_mayes.forces_crack[crack_mayes.n_crack * 6 + 1, :] == pytest.approx(
    #     # fmt: off
    # np.array([ 0.00000000e+000, -1.02102286e+001,  1.01529394e+007,
    #            5.09500751e+012, -2.21015174e+017, -4.52275296e+010,
    #           -1.79141238e+028,  4.63443780e+034, -9.22253732e+039,
    #            1.28655755e+044,  4.82833637e+036, -6.07713964e+054,
    #            4.40667426e+061, -1.87007296e+067,  6.10115428e+071,
    #            1.37892137e+065,  6.83874790e+082, -2.40331358e+089,
    #            7.18885370e+094, -1.86939691e+099, -3.57057633e+092,
    #           -1.54483287e+110,  4.82614233e+116, -1.29736265e+122,
    #            3.04570079e+126,  5.25148405e+119,  2.04082266e+137,
    #           -5.66839996e+143,  1.33073987e+149, -2.64230903e+153,
    #           -3.63525214e+146, -9.95880937e+163,  1.34683284e+170,
    #            1.19518251e+175, -1.48240379e+180, -4.85286257e+173,
    #           -2.92581702e+191,  1.16670548e+198, -3.82597438e+203,
    #            1.07029675e+208,  2.17435910e+201,  9.93915952e+218,
    #           -3.26763897e+225,  9.22785117e+230, -2.27709238e+235,
    #           -4.13789394e+228, -1.70389346e+246,  5.05885755e+252,
    #           -1.28780962e+258,  2.84331218e+262,  4.55858649e+255])
    #     # fmt: on
    # )

    # assert crack_mayes.forces_crack[crack_mayes.n_crack * 6 + 2, :] == pytest.approx(
    #     # fmt: off
    # np.array([ 0.00000000e+000,  2.17241230e-009, -1.99332522e-003,
    #            7.77206261e+002, -2.75904887e+008,  9.32008218e+013,
    #           -3.01168608e+019,  9.38899234e+024, -2.84195867e+030,
    #            8.39369547e+035, -2.43679656e+041,  6.91350038e+046,
    #           -1.91848366e+052,  5.21799425e+057, -1.39240144e+063,
    #            3.65209356e+068, -9.32344769e+073,  2.30475808e+079,
    #           -5.49269537e+084,  1.24953720e+090, -2.65205693e+095,
    #            4.93247721e+100, -6.63823787e+105, -1.30341373e+110,
    #            5.74064788e+116, -3.06568908e+122,  1.24115862e+128,
    #           -4.45391422e+133,  1.48864018e+139, -4.74466971e+144,
    #            1.46786510e+150, -4.40393815e+155,  1.28710308e+161,
    #           -3.67917164e+166,  1.03147199e+172, -2.84917876e+177,
    #            7.69621785e+182, -2.03020945e+188,  5.23205848e+193,
    #           -1.31540434e+199,  3.21654213e+204, -7.52492505e+209,
    #            1.65265413e+215, -3.29892921e+220,  5.47104626e+225,
    #           -4.71124216e+230, -1.63028293e+236,  1.25922279e+242,
    #           -5.64039331e+247,  2.12228908e+253, -7.35178254e+258])
    #     # fmt: on
    # )

    # assert crack_mayes.forces_crack[crack_mayes.n_crack * 6 + 3, :] == pytest.approx(
    #     # fmt: off
    # np.array([ 0.00000000e+000, -3.06306857e-001,  3.04588181e+005,
    #            1.52850225e+011, -6.63045521e+015, -1.36479325e+009,
    #           -5.37423714e+026,  1.39033134e+033, -2.76676120e+038,
    #            3.85967266e+042,  1.45484136e+035, -1.82314189e+053,
    #            1.32200228e+060, -5.61021887e+065,  1.83034628e+070,
    #            4.16211615e+063,  2.05162437e+081, -7.20994074e+087,
    #            2.15665611e+093, -5.60819072e+097, -1.07767050e+091,
    #           -4.63449860e+108,  1.44784270e+115, -3.89208796e+120,
    #            9.13710237e+124,  1.58493297e+118,  6.12246799e+135,
    #           -1.70051999e+142,  3.99221960e+147, -7.92692710e+151,
    #           -1.09701954e+145, -2.98764281e+162,  4.04049852e+168,
    #            3.58554752e+173, -4.44721138e+178, -1.46493529e+172,
    #           -8.77745107e+189,  3.50011643e+196, -1.14779231e+202,
    #            3.21089026e+206,  6.56280344e+199,  2.98174785e+217,
    #           -9.80291692e+223,  2.76835535e+229, -6.83127713e+233,
    #           -1.24887250e+227, -5.11168038e+244,  1.51765726e+251,
    #           -3.86342887e+256,  8.52993653e+260,  1.37576559e+254])
    #     # fmt: on
    # )

    # assert crack_mayes.forces_crack[crack_mayes.n_crack * 6 + 4, :] == pytest.approx(
    #     # fmt: off
    # np.array([ 0.00000000e+000,  1.69721240e+000,  1.14172240e+006,
    #           -5.38062400e+011,  1.71162621e+017, -2.71014595e+009,
    #            1.78471000e+028, -6.07520014e+033,  1.80186978e+039,
    #           -4.67683637e+044,  6.29506273e+036, -3.72897675e+055,
    #            1.13774323e+061, -3.04386751e+066,  7.13728472e+071,
    #           -8.53239989e+063,  4.57713695e+082, -1.22875976e+088,
    #            2.81815943e+093, -5.40877302e+098,  4.59800249e+090,
    #           -1.53330950e+109,  4.92554647e+113,  1.03881723e+120,
    #           -5.42770572e+125,  1.11488527e+118, -8.30889786e+136,
    #            3.13458304e+142, -1.00625315e+148,  2.78792906e+153,
    #           -4.00025265e+145,  2.47931158e+164, -7.95045214e+169,
    #            2.23491764e+175, -5.51618119e+180,  7.02389219e+172,
    #           -3.98246182e+191,  1.15242450e+197, -2.90787898e+202,
    #            6.37043018e+207, -6.91784386e+199,  3.36239493e+218,
    #           -7.67288087e+223,  1.32951454e+229, -1.26889680e+234,
    #           -1.36242908e+226,  2.16936553e+245, -1.14093326e+251,
    #            4.39207721e+256, -1.37225753e+262,  2.17381715e+254])
    #     # fmt: on
    # )

    # assert crack_mayes.forces_crack[crack_mayes.n_crack * 6 + 5, :] == pytest.approx(
    #     # fmt: off
    # np.array([ 0.00000000e+000,  7.47120410e-007,  2.69765943e-001,
    #            1.08536245e+004, -1.67914259e+010,  5.99537586e+015,
    #           -1.61810117e+021,  3.66975044e+026, -6.99604198e+031,
    #            9.67690674e+036,  1.83981327e+041, -8.69710863e+047,
    #            4.62072388e+053, -1.84507774e+059,  6.62382750e+064,
    #           -2.24067001e+070,  7.21321194e+075, -2.21236283e+081,
    #            6.54694521e+086, -1.91684214e+092,  5.54552828e+097,
    #           -1.56864992e+103,  4.29268261e+108, -1.14378389e+114,
    #            3.02532404e+119, -7.89334508e+124,  2.00092499e+130,
    #           -4.84374859e+135,  1.11777144e+141, -2.46568669e+146,
    #            4.99027595e+151, -8.33207063e+156,  7.03775844e+161,
    #            2.43673162e+167, -1.86900627e+173,  8.47608388e+178,
    #           -3.22587177e+184,  1.10851323e+190, -3.57112239e+195,
    #            1.11992001e+201, -3.43746648e+206,  1.02564582e+212,
    #           -2.95199086e+217,  8.26293291e+222, -2.29839910e+228,
    #            6.32845900e+233, -1.70350531e+239,  4.42567558e+244,
    #           -1.11465216e+250,  2.76491430e+255, -6.67489429e+260])
    #     # fmt: on
    # )
